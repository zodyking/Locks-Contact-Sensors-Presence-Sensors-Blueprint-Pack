blueprint:
  name: Aqara Door/Window Auto-Lock + Announce (Queued)
  description: |-
    ![Aqara](https://www.allthethings.best/wp-content/uploads/2025/05/Aqara-logo-scaled.jpg)

    Auto-lock a smart lock X seconds after the contact sensor reports **CLOSED** (re-checks before locking).
    Optional TTS announcements for **all** state changes of the contact sensor (door/window) and the lock.
    Messages queue (no overlap) because this automation runs in `mode: queued`.
  domain: automation

  input:
    door_sensor:
      name: Contact sensor (door/window)
      description: >
        Pick the contact sensor for THIS door or window.
        For most Aqara sensors, **ON = open** and **OFF = closed**.
        Device class should be `door`, `opening`, or `window`.
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - door
            - opening
            - window

    lock_entity:
      name: Smart lock
      description: "Pick the lock entity to control (Aqara or any `lock.*`)."
      selector:
        entity:
          domain: lock

    lock_delay:
      name: Auto-lock delay (seconds)
      description: "How long after the sensor first reports CLOSED to attempt locking."
      default: 10
      selector:
        number:
          min: 0
          max: 60
          unit_of_measurement: seconds
          mode: slider

    closed_stability:
      name: Closed stability window (seconds)
      description: >
        Extra time the sensor must remain closed (no bounce) before locking.
        Set to 0 to skip. After the main delay we wait this long and re-check closed.
      default: 0
      selector:
        number:
          min: 0
          max: 120
          unit_of_measurement: seconds
          mode: slider

    announce_enabled:
      name: Speak announcements
      description: "Turn on to speak every contact/lock state change."
      default: false
      selector:
        boolean: {}

    announce_sensor:
      name: Announce sensor open/close
      description: "If on, we announce sensor opened/closed events (from your window/door sensor)."
      default: true
      selector:
        boolean: {}

    announce_lock:
      name: Announce lock state changes
      description: "If on, we announce locked/unlocked/locking/unlocking/jammed."
      default: true
      selector:
        boolean: {}

    tts_engine:
      name: TTS engine
      description: "Pick your TTS engine entity (e.g., `tts.piper`). Required if announcements are enabled."
      selector:
        entity:
          domain: tts

    media_players:
      name: Speakers for TTS
      description: "One or more media_player entities to speak on (used only if announcements are enabled)."
      default: []
      selector:
        entity:
          domain: media_player
          multiple: true

    tts_cache:
      name: Cache TTS audio
      description: "Let Home Assistant cache synthesized speech when supported."
      default: false
      selector:
        boolean: {}

    tts_voice:
      name: Voice name (optional)
      description: "If supported by your TTS provider (options.voice). Leave blank for default."
      default: ""
      selector:
        text: {}

    custom_open_msg:
      name: Custom message — sensor OPENED (optional)
      description: 'Use {door} placeholder, e.g. "{door} opened." Leave blank for default.'
      default: ""
      selector:
        text: {}

    custom_closed_msg:
      name: Custom message — sensor CLOSED (optional)
      description: 'Use {door} placeholder, e.g. "{door} closed." Leave blank for default.'
      default: ""
      selector:
        text: {}

    custom_locked_msg:
      name: Custom message — LOCKED (optional)
      description: 'Use {lock} placeholder, e.g. "{lock} locked." Leave blank for default.'
      default: ""
      selector:
        text: {}

    custom_unlocked_msg:
      name: Custom message — UNLOCKED (optional)
      description: 'Use {lock} placeholder, e.g. "{lock} unlocked." Leave blank for default.'
      default: ""
      selector:
        text: {}

mode: queued
max: 50

trigger:
  - id: sensor_opened
    platform: state
    entity_id: !input door_sensor
    to: "on"

  - id: sensor_closed
    platform: state
    entity_id: !input door_sensor
    to: "off"

  - id: lock_changed
    platform: state
    entity_id: !input lock_entity

condition: []

action:
  - variables:
      sensor_ent: !input door_sensor
      lock_ent: !input lock_entity
      sensor_name: "{{ state_attr(sensor_ent, 'friendly_name') or sensor_ent }}"
      lock_name: "{{ state_attr(lock_ent, 'friendly_name') or lock_ent }}"

      # Inputs
      players: !input media_players
      tts_engine_ent: !input tts_engine
      tts_voice_name: !input tts_voice
      tts_cache_val: !input tts_cache
      announce_enabled: !input announce_enabled
      announce_sensor: !input announce_sensor
      announce_lock: !input announce_lock
      stability: !input closed_stability

      # Whether we can/should talk
      has_tts: >-
        {{ announce_enabled and (players | length > 0)
           and (tts_engine_ent is string and tts_engine_ent|length > 0) }}
      do_tts_sensor: "{{ has_tts and announce_sensor }}"
      do_tts_lock: "{{ has_tts and announce_lock }}"
      has_voice: "{{ (tts_voice_name | default('') | trim) != '' }}"

      # ---------- FINAL messages (use these everywhere) ----------
      final_opened: >-
        {% set base = (custom_open_msg | default('') | trim) %}
        {% if base %}{{ base | replace('{door}', sensor_name) }}{% else %}{{ sensor_name ~ ' opened.' }}{% endif %}
      final_closed: >-
        {% set base = (custom_closed_msg | default('') | trim) %}
        {% if base %}{{ base | replace('{door}', sensor_name) }}{% else %}{{ sensor_name ~ ' closed.' }}{% endif %}
      final_locked: >-
        {% set base = (custom_locked_msg | default('') | trim) %}
        {% if base %}{{ base | replace('{lock}', lock_name) }}{% else %}{{ lock_name ~ ' locked.' }}{% endif %}
      final_unlocked: >-
        {% set base = (custom_unlocked_msg | default('') | trim) %}
        {% if base %}{{ base | replace('{lock}', lock_name) }}{% else %}{{ lock_name ~ ' unlocked.' }}{% endif %}

  - choose:

      # ---------- SENSOR OPENED ----------
      - conditions:
          - condition: trigger
            id: sensor_opened
        sequence:
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ do_tts_sensor }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ has_voice }}"
                        sequence:
                          - service: tts.speak
                            target:
                              entity_id: !input tts_engine
                            data:
                              message: "{{ final_opened }}"
                              cache: !input tts_cache
                              media_player_entity_id: !input media_players
                              options:
                                voice: !input tts_voice
                    default:
                      - service: tts.speak
                        target:
                          entity_id: !input tts_engine
                        data:
                          message: "{{ final_opened }}"
                          cache: !input tts_cache
                          media_player_entity_id: !input media_players
            default: []

      # ---------- SENSOR CLOSED (speak first, then fully guarded auto-lock) ----------
      - conditions:
          - condition: trigger
            id: sensor_closed
        sequence:
          # Speak CLOSED immediately
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ do_tts_sensor }}"
                sequence:
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ has_voice }}"
                        sequence:
                          - service: tts.speak
                            target:
                              entity_id: !input tts_engine
                            data:
                              message: "{{ final_closed }}"
                              cache: !input tts_cache
                              media_player_entity_id: !input media_players
                              options:
                                voice: !input tts_voice
                    default:
                      - service: tts.speak
                        target:
                          entity_id: !input tts_engine
                        data:
                          message: "{{ final_closed }}"
                          cache: !input tts_cache
                          media_player_entity_id: !input media_players
            default: []

          # Guard 1: wait lock_delay unless sensor OPENS -> cancel
          - wait_for_trigger:
              - platform: state
                entity_id: !input door_sensor
                to: "on"
            timeout:
              seconds: !input lock_delay
            continue_on_timeout: true

          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ wait.completed | default(false) }}"
                sequence:
                  - stop: "Door reopened during delay; cancel auto-lock."
            default: []

          # Confirm still closed
          - condition: state
            entity_id: !input door_sensor
            state: "off"

          # Guard 2: optional stability window; cancel if opens
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (stability | int) > 0 }}"
                sequence:
                  - wait_for_trigger:
                      - platform: state
                        entity_id: !input door_sensor
                        to: "on"
                    timeout:
                      seconds: !input closed_stability
                    continue_on_timeout: true
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ wait.completed | default(false) }}"
                        sequence:
                          - stop: "Door reopened during stability; cancel auto-lock."
                    default: []
            default: []

          # Final re-check + last-moment guard
          - condition: state
            entity_id: !input door_sensor
            state: "off"
          - wait_for_trigger:
              - platform: state
                entity_id: !input door_sensor
                to: "on"
            timeout:
              seconds: 1
            continue_on_timeout: true
          - choose:
              - conditions:
                  - condition: template
                    v
