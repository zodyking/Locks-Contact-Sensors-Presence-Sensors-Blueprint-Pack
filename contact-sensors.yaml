blueprint:
  name: "Presence — Room Lights + TTS + Mobile Notifications"
  description: |-
    Turn lights on with presence, (optionally) speak and notify, and turn them off after presence clears.

    • ON hold: require presence to persist N seconds before acting.
    • OFF delay: wait N seconds after presence clears before turning things off.
    • Mobile notifications: selects Mobile App devices and calls per-device services.
    • TTS: pre-roll delay; voice sent only when provided (prevents “Invalid options: voice”).

  domain: automation

  input:
    presence_sensor:
      name: Presence / Motion sensor
      description: Binary sensor that reports presence (on = detected).
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - occupancy
            - motion
            - presence

    # --- Actions on presence ON ---
    on_hold:
      name: Hold before ON (seconds)
      description: Require continuous presence for this long before acting.
      default: 0
      selector:
        number:
          min: 0
          max: 120
          step: 1
          unit_of_measurement: s
          mode: slider

    on_entities:
      name: Turn ON these when presence starts
      description: Lights / switches to turn on.
      default: []
      selector:
        entity:
          multiple: true
          domain:
            - light
            - switch

    # --- Actions on presence OFF ---
    off_when_clear:
      name: Turn OFF after presence clears
      default: true
      selector:
        boolean: {}

    off_delay:
      name: OFF delay (seconds)
      description: Wait this long after presence clears, then turn OFF.
      default: 30
      selector:
        number:
          min: 0
          max: 600
          step: 5
          unit_of_measurement: s
          mode: slider

    off_entities:
      name: Turn OFF these when presence ends (optional)
      description: Leave empty to turn off the same entities used for ON.
      default: []
      selector:
        entity:
          multiple: true
          domain:
            - light
            - switch

    # --- TTS (optional) ---
    tts_enabled_on:
      name: Speak when presence starts
      default: false
      selector:
        boolean: {}

    tts_enabled_off:
      name: Speak when presence ends
      default: false
      selector:
        boolean: {}

    tts_engine:
      name: TTS engine (e.g., tts.piper)
      default: ""
      selector:
        entity:
          domain: tts

    media_players:
      name: Speakers for TTS
      default: []
      selector:
        entity:
          domain: media_player
          multiple: true

    tts_cache:
      name: Cache TTS audio
      default: false
      selector:
        boolean: {}

    tts_voice:
      name: Voice name (optional)
      description: Only used if your TTS provider supports voice selection.
      default: ""
      selector:
        text: {}

    tts_preroll_ms:
      name: TTS pre-roll (ms)
      description: Short delay before speaking to avoid clipping.
      default: 150
      selector:
        number:
          min: 0
          max: 300
          step: 10
          unit_of_measurement: ms
          mode: slider

    # --- Mobile notifications (optional) ---
    notify_enabled:
      name: Send Mobile App notification on presence start
      default: false
      selector:
        boolean: {}

    notify_devices:
      name: Mobile App devices to notify
      description: Pick phones/tablets registered via the Mobile App.
      default: []
      selector:
        device:
          multiple: true
          integration: mobile_app

mode: queued
max: 5

trigger:
  - id: presence_on
    platform: state
    entity_id: !input presence_sensor
    to: "on"

  - id: presence_off
    platform: state
    entity_id: !input presence_sensor
    to: "off"

condition: []

action:
  - variables:
      sensor_ent: !input presence_sensor
      room_name: "{{ area_name(sensor_ent) or 'Room' }}"
      on_entities: !input on_entities
      off_entities_in: !input off_entities
      off_entities_final: >-
        {{ (off_entities_in if (off_entities_in | length) > 0 else on_entities) }}
      on_hold: !input on_hold
      off_delay: !input off_delay
      off_when_clear: !input off_when_clear

      # TTS
      tts_engine_ent: !input tts_engine
      players: !input media_players
      tts_voice_name: !input tts_voice
      tts_preroll_ms: !input tts_preroll_ms
      tts_cache: !input tts_cache
      tts_enabled_on: !input tts_enabled_on
      tts_enabled_off: !input tts_enabled_off
      has_tts: >-
        {{ (players | length > 0)
           and (tts_engine_ent is string and tts_engine_ent | length > 0) }}
      can_tts_on: "{{ has_tts and tts_enabled_on }}"
      can_tts_off: "{{ has_tts and tts_enabled_off }}"
      tts_msg_on: "{{ room_name ~ ' presence detected.' }}"
      tts_msg_off: "{{ room_name ~ ' no presence.' }}"

      # Notifications
      notify_enabled: !input notify_enabled
      notify_devices: !input notify_devices
      can_notify: "{{ notify_enabled and (notify_devices | length > 0) }}"
      msg_detected: "{{ 'Presence detected in ' ~ room_name ~ '.' }}"

  - choose:

      # ---------------- PRESENCE ON ----------------
      - conditions:
          - condition: trigger
            id: presence_on
        sequence:

          # Optional ON hold (debounce). Abort if presence clears before timeout.
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (on_hold | int) > 0 }}"
                sequence:
                  - wait_for_trigger:
                      - platform: state
                        entity_id: !input presence_sensor
                        to: "off"
                    timeout:
                      seconds: "{{ on_hold | int }}"
                    continue_on_timeout: true
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ wait is mapping and (wait.completed | default(false)) }}"
                        sequence:
                          - stop: Presence cleared before ON hold elapsed; abort ON actions.
                default: []

          # Turn ON entities
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (on_entities | length) > 0 }}"
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: !input on_entities
            default: []

          # TTS on start (conditional voice)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ can_tts_on }}"
                sequence:
                  - delay:
                      milliseconds: "{{ tts_preroll_ms | int }}"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ (tts_voice_name | trim) != '' }}"
                        sequence:
                          - service: tts.speak
                            target:
                              entity_id: !input tts_engine
                            data:
                              message: "{{ tts_msg_on }}"
                              cache: "{{ tts_cache }}"
                              media_player_entity_id: !input media_players
                              options:
                                voice: "{{ tts_voice_name }}"
                    default:
                      - service: tts.speak
                        target:
                          entity_id: !input tts_engine
                        data:
                          message: "{{ tts_msg_on }}"
                          cache: "{{ tts_cache }}"
                          media_player_entity_id: !input media_players
            default: []

          # Mobile App notifications (per-device services)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ can_notify }}"
                sequence:
                  - repeat:
                      for_each: !input notify_devices
                      sequence:
                        - variables:
                            _slug: >-
                              {{ device_attr(repeat.item, 'name')
                                 | string | lower | regex_replace('[^a-z0-9]+','_') }}
                            _svc: "{{ 'notify.mobile_app_' ~ _slug }}"
                        - condition: template
                          value_template: "{{ has_service(_svc) }}"
                        - service: "{{ _svc }}"
                          data:
                            message: "{{ msg_detected }}"
            default: []

      # ---------------- PRESENCE OFF ----------------
      - conditions:
          - condition: trigger
            id: presence_off
        sequence:

          # Optional OFF delay + turn OFF
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ off_when_clear and (off_entities_final | length) > 0 }}"
                sequence:
                  - delay:
                      seconds: "{{ off_delay | int }}"
                  - service: homeassistant.turn_off
                    target:
                      entity_id: "{{ off_entities_final }}"
            default: []

          # TTS on clear (conditional voice)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ can_tts_off }}"
                sequence:
                  - delay:
                      milliseconds: "{{ tts_preroll_ms | int }}"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ (tts_voice_name | trim) != '' }}"
                        sequence:
                          - service: tts.speak
                            target:
                              entity_id: !input tts_engine
                            data:
                              message: "{{ tts_msg_off }}"
                              cache: "{{ tts_cache }}"
                              media_player_entity_id: !input media_players
                              options:
                                voice: "{{ tts_voice_name }}"
                    default:
                      - service: tts.speak
                        target:
                          entity_id: !input tts_engine
                        data:
                          message: "{{ tts_msg_off }}"
                          cache: "{{ tts_cache }}"
                          media_player_entity_id: !input media_players
            default: []
