blueprint:
  name: "Aqara: Presence Sensors"
  description: |-
    ![Aqara](https://raw.githubusercontent.com/zodyking/Locks-Contact-Sensors-Presence-Sensors-Blueprint-Pack/refs/heads/main/Image3.png)

    Presence-sensor-only blueprint for Aqara (e.g., FP2) or any binary_sensor that reports
    presence, occupancy, or motion. Provides optional spoken announcements, optional mobile
    notifications, and optional device control (turn on/off lights or switches) with per-direction
    hold times so actions feel natural and reliable.

    What it does
    - Announces PRESENCE DETECTED / PRESENCE CLEARED using the device’s Area name.
    - Optional notifications to selected Home Assistant Companion App devices.
    - Optional device control:
      - Turn ON selected entities after presence has been detected for X seconds.
      - Turn OFF selected entities after no presence for Y seconds.
    - TTS includes a short pre-roll to prevent clipped first words.
    - Automation runs in mode: restart so the newest state takes priority.

    Setup
    1) Pick your presence/occupancy sensor (binary_sensor).
    2) (Optional) Choose a TTS engine (e.g., tts.piper) and speakers.
    3) Independently toggle:
       - Speak presence announcements
       - Send mobile notifications (select Companion App devices)
    4) (Optional) Select entities to turn ON/OFF and set the hold times (0–10 s).

    Notes
    - The spoken "room" name comes from the entity’s Area (Settings → Areas).
    - Supports typical presence device classes: occupancy and motion.

  domain: automation

  input:
    presence_sensor:
      name: Presence / Occupancy sensor
      description: |-
        Select the binary_sensor that indicates presence.
        Typical device classes: occupancy or motion. ON = presence, OFF = clear.
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - occupancy
            - motion

    # ---- Action entities (optional) ----
    on_entities:
      name: Turn ON when presence is detected (optional)
      description: |-
        Select lights/switches to turn on after presence holds for X seconds.
        Leave empty to disable.
      default: []
      selector:
        entity:
          multiple: true
          domain:
            - light
            - switch

    off_entities:
      name: Turn OFF when presence is cleared (optional)
      description: |-
        Select lights/switches to turn off after no presence holds for Y seconds.
        Leave empty to disable.
      default: []
      selector:
        entity:
          multiple: true
          domain:
            - light
            - switch

    on_hold_secs:
      name: Presence hold BEFORE turning ON (seconds)
      description: |-
        How long presence must remain detected before turning ON the entities.
        0 applies immediately on detection.
      default: 0
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: seconds
          mode: slider

    off_hold_secs:
      name: Clear hold BEFORE turning OFF (seconds)
      description: |-
        How long no presence must remain before turning OFF the entities.
        0 applies immediately on clear.
      default: 0
      selector:
        number:
          min: 0
          max: 10
          unit_of_measurement: seconds
          mode: slider

    # ---- TTS / announcements ----
    announce_presence:
      name: Speak presence announcements
      description: |-
        If on, speak “Presence detected in <room>.” and “<room> cleared.”
      default: false
      selector:
        boolean: {}

    tts_engine:
      name: TTS engine
      description: |-
        Pick your TTS engine entity (e.g., tts.piper).
        Required if announcements are enabled.
      default: ""
      selector:
        entity:
          domain: tts

    media_players:
      name: Speakers for TTS
      description: |-
        One or more media_player entities to speak on (only used if announcements are enabled).
      default: []
      selector:
        entity:
          domain: media_player
          multiple: true

    tts_cache:
      name: Cache TTS audio
      description: |-
        Allow Home Assistant to cache synthesized speech when supported by your TTS provider.
      default: false
      selector:
        boolean: {}

    tts_voice:
      name: Voice name (optional; used only by engines that support it)
      description: |-
        If supported by your TTS provider (e.g., Piper, Edge TTS, Polly). Leave blank to use that engine’s default.
      default: ""
      selector:
        text: {}

    tts_preroll_ms:
      name: TTS pre-roll (milliseconds)
      description: |-
        Short delay before speaking to avoid clipping the first word (typical 150–200 ms).
        Reduce if it feels slow.
      default: 150
      selector:
        number:
          min: 0
          max: 300
          step: 10
          unit_of_measurement: ms
          mode: slider

    # ---- Notifications (optional) ----
    notify_enabled:
      name: Send mobile notifications
      description: |-
        If on, send notifications to selected Home Assistant Companion App devices.
      default: false
      selector:
        boolean: {}

    notify_devices:
      name: Companion App devices (auto-discovered)
      description: |-
        Choose one or more devices with the Home Assistant Companion App installed.
        Notifications will be sent to each device’s mobile_app notify service.
      default: []
      selector:
        device:
          multiple: true
          integration: mobile_app

mode: restart

trigger:
  - id: presence_on
    platform: state
    entity_id: !input presence_sensor
    to: "on"

  - id: presence_off
    platform: state
    entity_id: !input presence_sensor
    to: "off"

condition: []

action:
  - variables:
      pres_ent: !input presence_sensor

      # Area → room label (no friendly names for TTS)
      room_for_presence: "{{ area_name(pres_ent) or 'Room' }}"
      subject_presence: "{{ room_for_presence }}"

      # Action entities
      on_entities: !input on_entities
      off_entities: !input off_entities

      # Hold times
      on_hold: !input on_hold_secs
      off_hold: !input off_hold_secs

      # TTS plumbing
      announce_presence: !input announce_presence
      tts_engine_ent: !input tts_engine
      players: !input media_players
      tts_cache_val: !input tts_cache
      tts_voice_name: !input tts_voice
      tts_preroll_ms: !input tts_preroll_ms

      # Notifications
      notify_enabled: !input notify_enabled
      notify_devices: !input notify_devices

      # Gates
      has_tts: >-
        {{ announce_presence and (players | length > 0)
           and (tts_engine_ent is string and tts_engine_ent|length > 0) }}
      can_notify: >-
        {{ notify_enabled and (notify_devices | length) > 0 }}

      # Engines that accept "options.voice" in tts.speak:
      tts_supports_voice: >-
        {{ (tts_engine_ent | string) | regex_search('tts\\.(piper|edge_tts|coqui|microsoft|amazon_polly|polly|elevenlabs|openai)', ignorecase=True) }}
      tts_voice_set: "{{ (tts_voice_name | default('') | trim) != '' }}"
      use_voice_option: "{{ tts_supports_voice and tts_voice_set }}"

      # Messages
      msg_detected: "{{ 'Presence detected in ' ~ subject_presence ~ '.' }}"
      msg_cleared: "{{ subject_presence ~ ' cleared.' }}"

  - choose:

      # ===== PRESENCE DETECTED =====
      - conditions:
          - condition: trigger
            id: presence_on
        sequence:
          # Hold (only if > 0). Faster path when 0.
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (on_hold | int) > 0 }}"
                sequence:
                  - wait_for_trigger:
                      - platform: state
                        entity_id: !input presence_sensor
                        to: "off"
                    timeout:
                      seconds: !input on_hold_secs
                    continue_on_timeout: true
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ wait and wait.completed | default(false) }}"
                        sequence:
                          - stop: "Presence cleared before ON hold elapsed; abort ON actions."
                    default: []
            default: []

          # Turn ON immediately when allowed (fast path)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ (on_entities | length) > 0 }}"
                sequence:
                  - service: homeassistant.turn_on
                    target:
                      entity_id: !input on_entities
            default: []

          # TTS: presence detected (omit voice option for engines that don't support it)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ has_tts }}"
                sequence:
                  - delay:
                      milliseconds: "{{ tts_preroll_ms | int }}"
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ use_voice_option }}"
                        sequence:
                          - service: tts.speak
                            target:
                              entity_id: !input tts_engine
                            data:
                              message: "{{ msg_detected }}"
                              cache: "{{ tts_cache_val }}"
                              media_player_entity_id: !input media_players
                              options:
                                voice: "{{ tts_voice_name }}"
                    default:
                      - service: tts.speak
                        target:
                          entity_id: !input tts_engine
                        data:
                          message: "{{ msg_detected }}"
                          cache: "{{ tts_cache_val }}"
                          media_player_entity_id: !input media_players
            default: []

          # Notify: presence detected (send to each selected Companion App device)
          - choose:
              - conditions:
                  - condition: template
                    value_template: "{{ can_notify }}"
                sequence:
                  - repeat:
                      for_each: "{{ notify_devices }}"
                      sequence:
                        # Primary: per-device mobile_app notify service
                        - service: "{{ 'notify.mobile_app_' ~ (device_attr(repeat.item, 'name') | string | lower | regex_replace('[^a-z0-9]+','_')) }}"
                          data:
                            message: "{{ msg_detected }}"
                        # Fallback: generic notify with device_id target (some setups support this)
                        - service: notify.notify
                          data:
                            message: "{{ msg_detected }}"
                            target:
                              - device_id: "{{ repeat.item }}"
            default: []

      # ===== PRESENCE CLEARED =====
      - conditions:
          - condition: t
